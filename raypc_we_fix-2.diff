diff -u -p wireless/ray_cs-t1.c wireless/ray_cs.c
--- wireless/ray_cs-t1.c	Fri Dec 14 16:09:18 2001
+++ wireless/ray_cs.c	Fri Dec 14 16:21:30 2001
@@ -1048,7 +1048,9 @@ void cleanup_module(void)
 /*===========================================================================*/
 static int ray_dev_init(struct net_device *dev)
 {
+#ifdef RAY_IMMEDIATE_INIT
     int i;
+#endif	/* RAY_IMMEDIATE_INIT */
     ray_dev_t *local = dev->priv;
     dev_link_t *link = local->finder;
 
@@ -1060,6 +1062,7 @@ static int ray_dev_init(struct net_devic
 
     spin_lock(&local->ray_lock);
 
+#ifdef RAY_IMMEDIATE_INIT
     /* Download startup parameters */
     if ( (i = dl_startup_params(dev)) < 0)
     {
@@ -1068,6 +1071,13 @@ static int ray_dev_init(struct net_devic
         spin_unlock(&local->ray_lock);
         return -1;
     }
+#else	/* RAY_IMMEDIATE_INIT */
+    /* Postpone the card init so that we can still configure the card,
+     * for example using the Wireless Extensions. The init will happen
+     * in ray_open() - Jean II */
+    DEBUG(1,"ray_dev_init: postponing card init to ray_open() ; Status = %d\n",
+	  local->card_status);
+#endif	/* RAY_IMMEDIATE_INIT */
     
     /* copy mac and broadcast addresses to linux device */
     memcpy(&dev->dev_addr, &local->sparm.b4.a_mac_addr, ADDRLEN);
@@ -1336,14 +1346,18 @@ static int ray_dev_ioctl(struct net_devi
 
       /* Set frequency/channel */
     case SIOCSIWFREQ:
+      /* Reject if card is already initialised */
+      if(local->card_status != CARD_AWAITING_PARAM)
+	{
+	  err = -EBUSY;
+	  break;
+	}
+
       /* Setting by channel number */
       if ((wrq->u.freq.m > USA_HOP_MOD) || (wrq->u.freq.e > 0))
 	err = -EOPNOTSUPP;
       else
-	{
-	   local->sparm.b5.a_hop_pattern = wrq->u.freq.m;
-	   dl_startup_params(dev);
-	}
+	local->sparm.b5.a_hop_pattern = wrq->u.freq.m;
       break;
 
       /* Get current network name (ESSID) */
@@ -1365,6 +1379,13 @@ static int ray_dev_ioctl(struct net_devi
 
       /* Set desired network name (ESSID) */
     case SIOCSIWESSID:
+      /* Reject if card is already initialised */
+      if(local->card_status != CARD_AWAITING_PARAM)
+	{
+	  err = -EBUSY;
+	  break;
+	}
+
 	if (wrq->u.data.pointer)
 	{
 	    char	card_essid[IW_ESSID_MAX_SIZE + 1];
@@ -1392,7 +1413,6 @@ static int ray_dev_ioctl(struct net_devi
 		/* Set the ESSID in the card */
 		memcpy(local->sparm.b5.a_current_ess_id, card_essid,
 		       IW_ESSID_MAX_SIZE);
-		dl_startup_params(dev);
 	    }
 	}
 	break;
@@ -1447,6 +1467,14 @@ static int ray_dev_ioctl(struct net_devi
     case SIOCSIWRTS:
     {
 	int rthr = wrq->u.rts.value;
+
+      /* Reject if card is already initialised */
+      if(local->card_status != CARD_AWAITING_PARAM)
+	{
+	  err = -EBUSY;
+	  break;
+	}
+
 	/* if(wrq->u.rts.fixed == 0) we should complain */
 	if(wrq->u.rts.disabled)
 	    rthr = 32767;
@@ -1458,7 +1486,6 @@ static int ray_dev_ioctl(struct net_devi
 	    }
 	local->sparm.b5.a_rts_threshold[0] = (rthr >> 8) & 0xFF;
 	local->sparm.b5.a_rts_threshold[1] = rthr & 0xFF;
-	dl_startup_params(dev);
     }
     break;
 
@@ -1475,6 +1502,14 @@ static int ray_dev_ioctl(struct net_devi
     case SIOCSIWFRAG:
     {
 	int fthr = wrq->u.frag.value;
+
+      /* Reject if card is already initialised */
+      if(local->card_status != CARD_AWAITING_PARAM)
+	{
+	  err = -EBUSY;
+	  break;
+	}
+
 	/* if(wrq->u.frag.fixed == 0) should complain */
 	if(wrq->u.frag.disabled)
 	    fthr = 32767;
@@ -1486,7 +1521,6 @@ static int ray_dev_ioctl(struct net_devi
 	    }
 	local->sparm.b5.a_frag_threshold[0] = (fthr >> 8) & 0xFF;
 	local->sparm.b5.a_frag_threshold[1] = fthr & 0xFF;
-	dl_startup_params(dev);
     }
     break;
 
@@ -1503,6 +1537,13 @@ static int ray_dev_ioctl(struct net_devi
     {
 	char card_mode = 1;
 	
+      /* Reject if card is already initialised */
+      if(local->card_status != CARD_AWAITING_PARAM)
+	{
+	  err = -EBUSY;
+	  break;
+	}
+
 	switch (wrq->u.mode)
 	{
 	case IW_MODE_ADHOC:
@@ -1510,7 +1551,6 @@ static int ray_dev_ioctl(struct net_devi
 	    // Fall through
 	case IW_MODE_INFRA:
 	    local->sparm.b5.a_network_type = card_mode;
-	    dl_startup_params(dev);
 	    break;
 	default:
 	    err = -EINVAL;
@@ -1751,6 +1791,26 @@ static int ray_open(struct net_device *d
     link->open++;
     MOD_INC_USE_COUNT;
 
+    spin_lock(&local->ray_lock);
+
+    /* If the card is not started, time to start it ! - Jean II */
+    if(local->card_status == CARD_AWAITING_PARAM) {
+	int i;
+
+	DEBUG(1,"ray_open: doing init now !\n");
+
+	/* Download startup parameters */
+	if ( (i = dl_startup_params(dev)) < 0)
+	  {
+	    printk(KERN_INFO "ray_dev_init dl_startup_params failed - "
+		   "returns 0x%x\n",i);
+	    spin_unlock(&local->ray_lock);
+	    return -1;
+	  }
+     }
+
+    spin_unlock(&local->ray_lock);
+
     if (sniffer) netif_stop_queue(dev);
     else         netif_start_queue(dev);
     netif_mark_up(dev);
@@ -1771,6 +1831,11 @@ static int ray_dev_close(struct net_devi
     netif_mark_down(dev);
     if (link->state & DEV_STALE_CONFIG)
         mod_timer(&link->release, jiffies + HZ/20);
+
+    /* In here, we should stop the hardware (stop card from beeing active)
+     * and set local->card_status to CARD_AWAITING_PARAM, so that while the
+     * card is closed we can chage its configuration.
+     * Probably also need a COR reset to get into a sane state - Jean II */
 
     MOD_DEC_USE_COUNT;
 
