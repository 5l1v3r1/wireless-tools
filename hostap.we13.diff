diff -u -p -r driver/modules-orig/hostap_cs.c driver/modules/hostap_cs.c
--- driver/modules-orig/hostap_cs.c	Sat May 18 11:00:53 2002
+++ driver/modules/hostap_cs.c	Thu Jun 13 14:05:06 2002
@@ -7,11 +7,14 @@
 #include <linux/version.h>
 #include <linux/module.h>
 #include <linux/init.h>
-#include <linux/wireless.h>
 #include <linux/wait.h>
 #include <linux/timer.h>
 #include <linux/skbuff.h>
 #include <linux/netdevice.h>
+#include <linux/wireless.h>
+#if WIRELESS_EXT > 12
+#include <net/iw_handler.h>		/* New driver API */
+#endif	/* WIRELESS_EXT > 12 */
 
 #include <pcmcia/version.h>
 #include <pcmcia/cs_types.h>
diff -u -p -r driver/modules-orig/hostap_pci.c driver/modules/hostap_pci.c
--- driver/modules-orig/hostap_pci.c	Wed May 15 11:57:43 2002
+++ driver/modules/hostap_pci.c	Thu Jun 13 14:18:34 2002
@@ -8,9 +8,12 @@
 #include <linux/version.h>
 #include <linux/module.h>
 #include <linux/init.h>
-#include <linux/wireless.h>
 #include <linux/skbuff.h>
 #include <linux/netdevice.h>
+#include <linux/wireless.h>
+#if WIRELESS_EXT > 12
+#include <net/iw_handler.h>		/* New driver API */
+#endif	/* WIRELESS_EXT > 12 */
 
 #include <linux/ioport.h>
 #include <linux/pci.h>
diff -u -p -r driver/modules-orig/hostap_plx.c driver/modules/hostap_plx.c
--- driver/modules-orig/hostap_plx.c	Wed May 15 11:57:43 2002
+++ driver/modules/hostap_plx.c	Thu Jun 13 14:18:19 2002
@@ -11,9 +11,12 @@
 #include <linux/version.h>
 #include <linux/module.h>
 #include <linux/init.h>
-#include <linux/wireless.h>
 #include <linux/skbuff.h>
 #include <linux/netdevice.h>
+#include <linux/wireless.h>
+#if WIRELESS_EXT > 12
+#include <net/iw_handler.h>		/* New driver API */
+#endif	/* WIRELESS_EXT > 12 */
 
 #include <linux/ioport.h>
 #include <linux/pci.h>
diff -u -p -r driver/modules-orig/prism2.c driver/modules/prism2.c
--- driver/modules-orig/prism2.c	Sun May 19 04:27:46 2002
+++ driver/modules/prism2.c	Thu Jun 13 14:20:49 2002
@@ -230,6 +230,9 @@ int prism2_wep_decrypt(local_info_t *loc
 
 /* prism2_ioctl.c */
 static struct iw_statistics *prism2_get_wireless_stats(struct net_device *dev);
+#if WIRELESS_EXT > 12
+static const struct iw_handler_def	prism2_handler_def;
+#endif	/* WIRELESS_EXT > 12 */
 static int prism2_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd);
 
 /* prism2_proc.c */
@@ -2895,6 +2898,9 @@ static void prism2_setup_dev(struct net_
 	dev->get_stats = prism2_get_stats;
 #ifdef WIRELESS_EXT
 	dev->get_wireless_stats = main_dev ? prism2_get_wireless_stats : NULL;
+#if WIRELESS_EXT > 12
+	dev->wireless_handlers = (struct iw_handler_def *) &prism2_handler_def;
+#endif /* WIRELESS_EXT > 12 */
 #endif
 	dev->open = prism2_open;
 	dev->stop = prism2_close;
diff -u -p -r driver/modules-orig/prism2_ioctl.c driver/modules/prism2_ioctl.c
--- driver/modules-orig/prism2_ioctl.c	Sun May 19 04:27:46 2002
+++ driver/modules/prism2_ioctl.c	Thu Jun 13 14:10:18 2002
@@ -2,6 +2,23 @@
 
 #ifdef WIRELESS_EXT
 
+/* Conversion to new driver API by Jean II */
+
+#if WIRELESS_EXT <= 12
+/* Wireless extensions backward compatibility */
+
+/* Dummy prototype, as we don't really need it */
+struct iw_request_info;
+
+/* Private ioctl is migrating to a new range... */
+/* This should really be in prism2_wlan.h.
+ * Careful while doing the conversion, the new range conform to the SET/GET
+ * convention. - Jean II */
+#ifndef SIOCIWFIRSTPRIV
+#define SIOCIWFIRSTPRIV		SIOCDEVPRIVATE
+#endif /* SIOCIWFIRSTPRIV */
+#endif	/* WIRELESS_EXT <= 12 */
+
 static struct iw_statistics *prism2_get_wireless_stats(struct net_device *dev)
 {
 	local_info_t *local = (local_info_t *) dev->priv;
@@ -39,6 +56,15 @@ static struct iw_statistics *prism2_get_
 }
 
 
+static int prism2_get_name(struct net_device *dev,
+			   struct iw_request_info *info,
+			   char *name,
+			   char *extra)
+{
+	strcpy(name, "IEEE 802.11-DS");
+	return 0;
+}
+
 #if WIRELESS_EXT > 8
 static int prism2_get_key_idx(struct net_device *dev, int idx)
 {
@@ -62,7 +88,10 @@ static int prism2_get_key_idx(struct net
 }
 
 
-static int prism2_ioctl_siwencode(struct net_device *dev, struct iw_point *erq)
+static int prism2_ioctl_siwencode(struct net_device *dev,
+				  struct iw_request_info *info,
+				  struct iw_point *erq,
+				  char *keybuf)
 {
 	local_info_t *local = (local_info_t *) dev->priv;
 	int i;
@@ -71,16 +100,12 @@ static int prism2_ioctl_siwencode(struct
 	if (i < 0 || i >= WEP_KEYS)
 		return -EINVAL;
 
-	if (erq->pointer != (caddr_t) 0) {
-		char keybuf[WEP_KEY_LEN + 1];
-
+	if (erq->length > 0) {
 		if (erq->length > WEP_KEY_LEN)
 			return -EINVAL;
 
-		memset(keybuf, 0, sizeof(keybuf));
-		if (copy_from_user(keybuf, erq->pointer, erq->length))
-			return -EFAULT;
-		memcpy(local->wep_keys[i], keybuf, WEP_KEY_LEN + 1);
+		memset(local->wep_keys[i], 0, WEP_KEY_LEN + 1);
+		memcpy(local->wep_keys[i], keybuf, erq->length);
 		local->wep_key_len[i] = erq->length <= 5 ? 5 : 13;
 	} else
 		local->wep_tx_key = i;
@@ -90,8 +115,7 @@ static int prism2_ioctl_siwencode(struct
 	else
 		local->open_wep = 0;
 
-	if ((erq->pointer != (caddr_t) 0 && erq->length == 0) ||
-	    erq->flags & IW_ENCODE_DISABLED)
+	if (erq->flags & IW_ENCODE_DISABLED)
 		local->use_wep = 0;
 	else
 		local->use_wep = 1;
@@ -103,7 +127,10 @@ static int prism2_ioctl_siwencode(struct
 }
 
 
-static int prism2_ioctl_giwencode(struct net_device *dev, struct iw_point *erq)
+static int prism2_ioctl_giwencode(struct net_device *dev,
+				  struct iw_request_info *info,
+				  struct iw_point *erq,
+				  char *key)
 {
 	local_info_t *local = (local_info_t *) dev->priv;
 	int i;
@@ -111,9 +138,6 @@ static int prism2_ioctl_giwencode(struct
 	char keybuf[14];
 	int keylen;
 
-	if (erq->pointer == (caddr_t) 0)
-		return -EINVAL;
-
 	if (local->iw_mode == IW_MODE_MASTER)
 		i = local->wep_tx_key;
 	else
@@ -127,11 +151,8 @@ static int prism2_ioctl_giwencode(struct
 	 * the keys from driver buffer */
 	keylen = hfa384x_get_rid(dev, HFA384X_RID_CNFDEFAULTKEY0 + i,
 				 keybuf, sizeof(keybuf), 0);
-	if (copy_to_user(erq->pointer, local->wep_keys[i],
-			 local->wep_key_len[i]))
-		return -EFAULT;
-	else
-		erq->length = local->wep_key_len[i];
+	memcpy(key, local->wep_keys[i], local->wep_key_len[i]);
+	erq->length = local->wep_key_len[i];
 
 	if (hfa384x_get_rid(dev, HFA384X_RID_CNFWEPFLAGS, &val, 2, 1) < 0) {
 		printk("CNFWEPFLAGS reading failed\n");
@@ -151,7 +172,10 @@ static int prism2_ioctl_giwencode(struct
 }
 
 
-static int prism2_ioctl_giwspy(struct net_device *dev, struct iw_point *srq)
+static int prism2_ioctl_giwspy(struct net_device *dev,
+				struct iw_request_info *info,
+				struct iw_point *srq,
+				char *extra)
 {
 	local_info_t *local = (local_info_t *) dev->priv;
 	struct sockaddr addr[IW_MAX_SPY];
@@ -173,17 +197,18 @@ static int prism2_ioctl_giwspy(struct ne
 
 	srq->length = prism2_ap_get_sta_qual(local, addr, qual, IW_MAX_SPY, 0);
 
-	if (copy_to_user(srq->pointer, &addr, sizeof(addr[0]) * srq->length))
-		return -EFAULT;
-	if (copy_to_user(srq->pointer + sizeof(addr[0]) * srq->length, &qual,
-			 sizeof(qual[0]) * srq->length))
-		return -EFAULT;
+	memcpy(extra, &addr, sizeof(addr[0]) * srq->length);
+	memcpy(extra + sizeof(addr[0]) * srq->length, &qual,
+	       sizeof(qual[0]) * srq->length);
 
 	return 0;
 }
 
 
-static int prism2_ioctl_siwrate(struct net_device *dev, struct iw_param *rrq)
+static int prism2_ioctl_siwrate(struct net_device *dev,
+				struct iw_request_info *info,
+				struct iw_param *rrq,
+				char *extra)
 {
 	local_info_t *local = (local_info_t *) dev->priv;
 	int ret = 0;
@@ -245,7 +270,10 @@ static int prism2_ioctl_siwrate(struct n
 	return ret;
 }
 
-static int prism2_ioctl_giwrate(struct net_device *dev, struct iw_param *rrq)
+static int prism2_ioctl_giwrate(struct net_device *dev,
+				struct iw_request_info *info,
+				struct iw_param *rrq,
+				char *extra)
 {
 	u16 val;
 	int ret = 0;
@@ -285,7 +313,10 @@ static int prism2_ioctl_giwrate(struct n
 }
 
 
-static int prism2_ioctl_siwsens(struct net_device *dev, struct iw_param *sens)
+static int prism2_ioctl_siwsens(struct net_device *dev,
+				struct iw_request_info *info,
+				struct iw_param *sens,
+				char *extra)
 {
 	/* Set the desired AP density */
 	if (sens->value < 1 || sens->value > 3)
@@ -298,7 +329,10 @@ static int prism2_ioctl_siwsens(struct n
 	return 0;
 }
 
-static int prism2_ioctl_giwsens(struct net_device *dev, struct iw_param *sens)
+static int prism2_ioctl_giwsens(struct net_device *dev,
+				struct iw_request_info *info,
+				struct iw_param *sens,
+				char *extra)
 {
 	u16 val;
 
@@ -312,21 +346,16 @@ static int prism2_ioctl_giwsens(struct n
 	return 0;
 }
 
-
+// Deprecated. Don't bother with this one - Jean II
 static int prism2_ioctl_giwaplist(struct net_device *dev,
-				  struct iw_point *data)
+				  struct iw_request_info *info,
+				  struct iw_point *data,
+				  char *extra)
 {
 	local_info_t *local = (local_info_t *) dev->priv;
 	struct sockaddr addr[IW_MAX_AP];
 	struct iw_quality qual[IW_MAX_AP];
 
-	if (data->pointer == NULL) {
-		printk(KERN_DEBUG "%s: SIOCGIWAPLIST: pointer == NULL\n",
-		       dev->name);
-		data->length = 0;
-		return -EINVAL;
-	}
-
 	if (local->iw_mode != IW_MODE_MASTER) {
 		printk(KERN_DEBUG "SIOCGIWAPLIST is currently only supported "
 		       "in Host AP mode\n");
@@ -336,18 +365,19 @@ static int prism2_ioctl_giwaplist(struct
 
 	data->length = prism2_ap_get_sta_qual(local, addr, qual, IW_MAX_AP, 1);
 
-	if (copy_to_user(data->pointer, &addr, sizeof(addr[0]) * data->length))
-		return -EFAULT;
+	memcpy(extra, &addr, sizeof(addr[0]) * data->length);
 	data->flags = 1; /* has quality information */
-	if (copy_to_user(data->pointer + sizeof(addr[0]) * data->length, &qual,
-			 sizeof(qual[0]) * data->length))
-		return -EFAULT;
+	memcpy(extra + sizeof(addr[0]) * data->length, &qual,
+	       sizeof(qual[0]) * data->length);
 
 	return 0;
 }
 
 
-static int prism2_ioctl_siwrts(struct net_device *dev, struct iw_param *rts)
+static int prism2_ioctl_siwrts(struct net_device *dev,
+			       struct iw_request_info *info,
+			       struct iw_param *rts,
+			       char *extra)
 {
 	u16 val;
 
@@ -365,7 +395,10 @@ static int prism2_ioctl_siwrts(struct ne
 	return 0;
 }
 
-static int prism2_ioctl_giwrts(struct net_device *dev, struct iw_param *rts)
+static int prism2_ioctl_giwrts(struct net_device *dev,
+			       struct iw_request_info *info,
+			       struct iw_param *rts,
+			       char *extra)
 {
 	u16 val;
 
@@ -380,7 +413,10 @@ static int prism2_ioctl_giwrts(struct ne
 }
 
 
-static int prism2_ioctl_siwfrag(struct net_device *dev, struct iw_param *rts)
+static int prism2_ioctl_siwfrag(struct net_device *dev,
+				struct iw_request_info *info,
+				struct iw_param *rts,
+				char *extra)
 {
 	u16 val;
 
@@ -398,7 +434,10 @@ static int prism2_ioctl_siwfrag(struct n
 	return 0;
 }
 
-static int prism2_ioctl_giwfrag(struct net_device *dev, struct iw_param *rts)
+static int prism2_ioctl_giwfrag(struct net_device *dev,
+				struct iw_request_info *info,
+				struct iw_param *rts,
+				char *extra)
 {
 	u16 val;
 
@@ -415,7 +454,10 @@ static int prism2_ioctl_giwfrag(struct n
 #endif /* WIRELESS_EXT > 8 */
 
 
-static int prism2_ioctl_giwap(struct net_device *dev, struct sockaddr *ap_addr)
+static int prism2_ioctl_giwap(struct net_device *dev,
+			      struct iw_request_info *info,
+			      struct sockaddr *ap_addr,
+			      char *extra)
 {
 	local_info_t *local = (local_info_t *) dev->priv;
 
@@ -433,7 +475,10 @@ static int prism2_ioctl_giwap(struct net
 
 
 #if WIRELESS_EXT > 8
-static int prism2_ioctl_siwnickn(struct net_device *dev, struct iw_point *data)
+static int prism2_ioctl_siwnickn(struct net_device *dev,
+				 struct iw_request_info *info,
+				 struct iw_point *data,
+				 char *nickname)
 {
 	local_info_t *local = (local_info_t *) dev->priv;
 
@@ -443,8 +488,7 @@ static int prism2_ioctl_siwnickn(struct 
 	if (data->length > MAX_NAME_LEN + 1)
 		return -E2BIG;
 
-	if (copy_from_user(local->name, data->pointer, data->length))
-		return -EFAULT;
+	memcpy(local->name, nickname, data->length);
 
 	local->name[MAX_NAME_LEN] = '\0';
 	local->name_set = 1;
@@ -456,15 +500,15 @@ static int prism2_ioctl_siwnickn(struct 
 	return 0;
 }
 
-static int prism2_ioctl_giwnickn(struct net_device *dev, struct iw_point *data)
+static int prism2_ioctl_giwnickn(struct net_device *dev,
+				 struct iw_request_info *info,
+				 struct iw_point *data,
+				 char *nickname)
 {
 	int len;
 	char name[MAX_NAME_LEN + 3];
 	u16 val;
 
-	if (!data->pointer)
-		return -EINVAL;
-
 	len = hfa384x_get_rid(dev, HFA384X_RID_CNFOWNNAME,
 			      &name, MAX_NAME_LEN + 2, 0);
 	val = __le16_to_cpu(*(u16 *) name);
@@ -473,14 +517,17 @@ static int prism2_ioctl_giwnickn(struct 
 
 	name[val + 2] = '\0';
 	data->length = val + 1;
-	copy_to_user(data->pointer, name + 2, val);
+	memcpy(nickname, name + 2, val + 1);
 
 	return 0;
 }
 #endif /* WIRELESS_EXT > 8 */
 
 
-static int prism2_ioctl_siwfreq(struct net_device *dev, struct iw_freq *freq)
+static int prism2_ioctl_siwfreq(struct net_device *dev,
+				struct iw_request_info *info,
+				struct iw_freq *freq,
+				char *extra)
 {
 	local_info_t *local = (local_info_t *) dev->priv;
 
@@ -511,7 +558,10 @@ static int prism2_ioctl_siwfreq(struct n
 	return 0;
 }
 
-static int prism2_ioctl_giwfreq(struct net_device *dev, struct iw_freq *freq)
+static int prism2_ioctl_giwfreq(struct net_device *dev,
+				struct iw_request_info *info,
+				struct iw_freq *freq,
+				char *extra)
 {
 	u16 val;
 
@@ -530,22 +580,22 @@ static int prism2_ioctl_giwfreq(struct n
 
 
 #if WIRELESS_EXT > 8
-static int prism2_ioctl_siwessid(struct net_device *dev, struct iw_point *data)
+static int prism2_ioctl_siwessid(struct net_device *dev,
+				 struct iw_request_info *info,
+				 struct iw_point *data,
+				 char *ssid)
 {
 	local_info_t *local = (local_info_t *) dev->priv;
-	char ssid[MAX_SSID_LEN + 1];
-
-	if (!data->pointer)
-		return -EINVAL;
 
+	/* Important note : the last arg is always mallocated by WE
+	 * for the max size (here IW_ESSID_MAX_SIZE+1).
+	 * But don't abuse it. - Jean II */
 	if (data->flags == 0) {
 		ssid[0] = '\0'; /* ANY */
 	} else {
 		if (data->length > MAX_SSID_LEN + 1)
 			return -E2BIG;
 
-		if (copy_from_user(ssid, data->pointer, data->length))
-			return -EFAULT;
 		ssid[MAX_SSID_LEN] = '\0';
 	}
 
@@ -567,19 +617,18 @@ static int prism2_ioctl_siwessid(struct 
 	return 0;
 }
 
-static int prism2_ioctl_giwessid(struct net_device *dev, struct iw_point *data)
+static int prism2_ioctl_giwessid(struct net_device *dev,
+				 struct iw_request_info *info,
+				 struct iw_point *data,
+				 char *essid)
 {
 	local_info_t *local = (local_info_t *) dev->priv;
 	u16 val;
 
-	if (!data->pointer)
-		return -EINVAL;
-
 	data->flags = 1; /* active */
 	if (local->iw_mode == IW_MODE_MASTER) {
 		data->length = strlen(local->essid) + 1;
-		copy_to_user(data->pointer, local->essid,
-			     sizeof(local->essid));
+		memcpy(essid, local->essid, sizeof(local->essid));
 	} else {
 		int len;
 		char ssid[MAX_SSID_LEN + 3];
@@ -591,81 +640,81 @@ static int prism2_ioctl_giwessid(struct 
 		}
 		ssid[val + 2] = '\0';
 		data->length = val + 1;
-		copy_to_user(data->pointer, ssid + 2, val);
+		memcpy(essid, ssid + 2, val + 1);
 	}
 
 	return 0;
 }
 
 
-static int prism2_ioctl_giwrange(struct net_device *dev, struct iw_point *data)
+static int prism2_ioctl_giwrange(struct net_device *dev,
+				    struct iw_request_info *info,
+				    struct iw_point *data,
+				    char *extra)
 {
 	local_info_t *local = (local_info_t *) dev->priv;
-	struct iw_range range;
+	struct iw_range *range = (struct iw_range *) extra;
 	u16 val;
 	int i;
 
-	if (verify_area(VERIFY_WRITE, data->pointer, sizeof(range)))
-		return -EINVAL;
-
-	data->length = sizeof(range);
-	memset(&range, 0, sizeof(range));
+	data->length = sizeof(struct iw_range);
+	memset(range, 0, sizeof(struct iw_range));
 
 #if WIRELESS_EXT > 9
 	/* TODO: could fill num_txpower and txpower array with
 	 * something; however, there are 128 different values.. */
 
-	range.txpower_capa = IW_TXPOW_DBM;
+	range->txpower_capa = IW_TXPOW_DBM;
 #endif /* WIRELESS_EXT > 9 */
 
 #if WIRELESS_EXT > 10
-	range.we_version_compiled = WIRELESS_EXT;
-	range.we_version_source = 11;
+	range->we_version_compiled = WIRELESS_EXT;
+	range->we_version_source = 11;
 #endif /* WIRELESS_EXT > 10 */
 
-	range.min_nwid = range.max_nwid = 0;
+	//range->min_nwid = range->max_nwid = 0; => memset
 
-	range.num_channels = FREQ_COUNT;
+	range->num_channels = FREQ_COUNT;
 
 	val = 0;
 	for (i = 0; i < FREQ_COUNT; i++) {
 		if (local->channel_mask & (1 << i)) {
-			range.freq[val].i = i + 1;
-			range.freq[val].m = freq_list[i] * 100000;
-			range.freq[val].e = 1;
+			range->freq[val].i = i + 1;
+			range->freq[val].m = freq_list[i] * 100000;
+			range->freq[val].e = 1;
 			val++;
 		}
 		if (val == IW_MAX_FREQUENCIES)
 			break;
 	}
-	range.num_frequency = val;
+	range->num_frequency = val;
 
-	range.max_qual.qual = 92; /* 0 .. 92 */
-	range.max_qual.level = 154; /* 27 .. 154 */
-	range.max_qual.noise = 154; /* 27 .. 154 */
-	range.sensitivity = 3;
-
-	if (copy_to_user(data->pointer, &range, sizeof(range)))
-		return -EFAULT;
+	range->max_qual.qual = 92; /* 0 .. 92 */
+	range->max_qual.level = 154; /* 27 .. 154 */
+	range->max_qual.noise = 154; /* 27 .. 154 */
+	range->sensitivity = 3;
 
 	return 0;
 }
 
 
-static int prism2_ioctl_siwmode(struct net_device *dev, __u32 mode)
+static int prism2_ioctl_siwmode(struct net_device *dev,
+				struct iw_request_info *info,
+				__u32 *mode,
+				char *extra)
 {
 	local_info_t *local = (local_info_t *) dev->priv;
 
-	if (mode != IW_MODE_ADHOC && mode != IW_MODE_INFRA &&
-	    mode != IW_MODE_MASTER)
+	if (*mode != IW_MODE_ADHOC && *mode != IW_MODE_INFRA &&
+	    *mode != IW_MODE_MASTER)
 		return -EOPNOTSUPP;
 
-	if (mode == local->iw_mode)
+	if (*mode == local->iw_mode)
 		return 0;
 
 	printk(KERN_DEBUG "prism2: %s: operating mode changed "
-	       "%d -> %d\n", dev->name, local->iw_mode, mode);
-	local->iw_mode = mode;
+	       "%d -> %d\n", dev->name, local->iw_mode, *mode);
+	local->iw_mode = *mode;
 
 	if (prism2_set_word(dev, HFA384X_RID_CNFPORTTYPE,
 			    prism2_get_porttype(local)))
@@ -678,7 +727,23 @@ static int prism2_ioctl_siwmode(struct n
 }
 
 
-static int prism2_ioctl_siwpower(struct net_device *dev, struct iw_param *wrq)
+static int prism2_ioctl_giwmode(struct net_device *dev,
+				struct iw_request_info *info,
+				__u32 *mode,
+				char *extra)
+{
+	local_info_t *local = (local_info_t *) dev->priv;
+
+	*mode = local->iw_mode;
+	return 0;
+}
+
+
+
+static int prism2_ioctl_siwpower(struct net_device *dev,
+				 struct iw_request_info *info,
+				 struct iw_param *wrq,
+				 char *extra)
 {
 	int ret = 0;
 
@@ -731,7 +796,10 @@ static int prism2_ioctl_siwpower(struct 
 }
 
 
-static int prism2_ioctl_giwpower(struct net_device *dev, struct iw_param *rrq)
+static int prism2_ioctl_giwpower(struct net_device *dev,
+				 struct iw_request_info *info,
+				 struct iw_param *rrq,
+				 char *extra)
 {
 	u16 enable, mcast;
 
@@ -778,7 +846,10 @@ static int prism2_ioctl_giwpower(struct 
 
 
 #if WIRELESS_EXT > 10
-static int prism2_ioctl_siwretry(struct net_device *dev, struct iw_param *rrq)
+static int prism2_ioctl_siwretry(struct net_device *dev,
+				 struct iw_request_info *info,
+				 struct iw_param *rrq,
+				 char *extra)
 {
 	local_info_t *local = (local_info_t *) dev->priv;
 
@@ -833,7 +904,10 @@ static int prism2_ioctl_siwretry(struct 
 #endif /* 0 */
 }
 
-static int prism2_ioctl_giwretry(struct net_device *dev, struct iw_param *rrq)
+static int prism2_ioctl_giwretry(struct net_device *dev,
+				 struct iw_request_info *info,
+				 struct iw_param *rrq,
+				 char *extra)
 {
 	local_info_t *local = (local_info_t *) dev->priv;
 	u16 shortretry, longretry, lifetime;
@@ -913,7 +987,10 @@ static u16 prism2_txpower_dBm_to_hfa386x
 }
 
 
-static int prism2_ioctl_siwtxpow(struct net_device *dev, struct iw_param *rrq)
+static int prism2_ioctl_siwtxpow(struct net_device *dev,
+				 struct iw_request_info *info,
+				 struct iw_param *rrq,
+				 char *extra)
 {
 	local_info_t *local = (local_info_t *) dev->priv;
 	char *tmp;
@@ -981,7 +1058,10 @@ static int prism2_ioctl_siwtxpow(struct 
 	return ret;
 }
 
-static int prism2_ioctl_giwtxpow(struct net_device *dev, struct iw_param *rrq)
+static int prism2_ioctl_giwtxpow(struct net_device *dev,
+				 struct iw_request_info *info,
+				 struct iw_param *rrq,
+				 char *extra)
 {
 	local_info_t *local = (local_info_t *) dev->priv;
 	u16 resp0;
@@ -1015,50 +1095,53 @@ static int prism2_ioctl_giwtxpow(struct 
 
 
 #if WIRELESS_EXT > 8
-static int prism2_ioctl_giwpriv(struct net_device *dev, struct iw_point *data)
-{
-	struct iw_priv_args priv[] = {
+struct iw_priv_args prism2_priv[] = {
 #ifdef PRISM2_MONITOR
-		{ PRISM2_IOCTL_MONITOR,
-		  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "monitor" },
+	{ PRISM2_IOCTL_MONITOR,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "monitor" },
 #endif /* PRISM2_MONITOR */
-		{ PRISM2_IOCTL_PRISM2_PARAM,
-		  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 2, 0,
-		  "prism2_param" },
-		{ PRISM2_IOCTL_READMIF,
-		  IW_PRIV_TYPE_BYTE | IW_PRIV_SIZE_FIXED | 1,
-		  IW_PRIV_TYPE_BYTE | IW_PRIV_SIZE_FIXED | 1, "readmif" },
-		{ PRISM2_IOCTL_WRITEMIF,
-		  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 2, 0, "writemif" },
-		{ PRISM2_IOCTL_RESET,
-		  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "reset" },
-		{ PRISM2_IOCTL_INQUIRE,
-		  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "inquire" },
-		{ PRISM2_IOCTL_WDS_ADD,
-		  IW_PRIV_TYPE_CHAR | IW_PRIV_SIZE_FIXED | 18, 0, "wds_add" },
-		{ PRISM2_IOCTL_WDS_DEL,
-		  IW_PRIV_TYPE_CHAR | IW_PRIV_SIZE_FIXED | 18, 0, "wds_del" },
-		{ PRISM2_IOCTL_SET_RID_WORD,
-		  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 2, 0,
-		  "set_rid_word" },
-		{ PRISM2_IOCTL_MACCMD,
-		  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "maccmd" },
-		{ PRISM2_IOCTL_ADDMAC,
-		  IW_PRIV_TYPE_CHAR | IW_PRIV_SIZE_FIXED | 18, 0, "addmac" },
-		{ PRISM2_IOCTL_DELMAC,
-		  IW_PRIV_TYPE_CHAR | IW_PRIV_SIZE_FIXED | 18, 0, "delmac" },
-		{ PRISM2_IOCTL_KICKMAC,
-		  IW_PRIV_TYPE_CHAR | IW_PRIV_SIZE_FIXED | 18, 0, "kickmac" }
-	};
+	{ PRISM2_IOCTL_PRISM2_PARAM,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 2, 0,
+	  "prism2_param" },
+	{ PRISM2_IOCTL_READMIF,
+	  IW_PRIV_TYPE_BYTE | IW_PRIV_SIZE_FIXED | 1,
+	  IW_PRIV_TYPE_BYTE | IW_PRIV_SIZE_FIXED | 1, "readmif" },
+	{ PRISM2_IOCTL_WRITEMIF,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 2, 0, "writemif" },
+	{ PRISM2_IOCTL_RESET,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "reset" },
+	{ PRISM2_IOCTL_INQUIRE,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "inquire" },
+	{ PRISM2_IOCTL_WDS_ADD,
+	  IW_PRIV_TYPE_CHAR | IW_PRIV_SIZE_FIXED | 18, 0, "wds_add" },
+	{ PRISM2_IOCTL_WDS_DEL,
+	  IW_PRIV_TYPE_CHAR | IW_PRIV_SIZE_FIXED | 18, 0, "wds_del" },
+	{ PRISM2_IOCTL_SET_RID_WORD,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 2, 0,
+	  "set_rid_word" },
+	{ PRISM2_IOCTL_MACCMD,
+	  IW_PRIV_TYPE_INT | IW_PRIV_SIZE_FIXED | 1, 0, "maccmd" },
+	{ PRISM2_IOCTL_ADDMAC,
+	  IW_PRIV_TYPE_CHAR | IW_PRIV_SIZE_FIXED | 18, 0, "addmac" },
+	{ PRISM2_IOCTL_DELMAC,
+	  IW_PRIV_TYPE_CHAR | IW_PRIV_SIZE_FIXED | 18, 0, "delmac" },
+	{ PRISM2_IOCTL_KICKMAC,
+	  IW_PRIV_TYPE_CHAR | IW_PRIV_SIZE_FIXED | 18, 0, "kickmac" }
+};
 
+#if WIRELESS_EXT <= 12
+/* Done automatically via prism2_handler_def in v13 and later - Jean II */
+static int prism2_ioctl_giwpriv(struct net_device *dev, struct iw_point *data)
+{
 	if (!data->pointer ||
-	    verify_area(VERIFY_WRITE, data->pointer, sizeof(priv)))
+	    verify_area(VERIFY_WRITE, data->pointer, sizeof(prism2_priv)))
 		return -EINVAL;
 
-	data->length = sizeof(priv) / sizeof(priv[0]);
-	copy_to_user(data->pointer, priv, sizeof(priv));
+	data->length = sizeof(prism2_priv) / sizeof(prism2_priv[0]);
+	copy_to_user(data->pointer, prism2_priv, sizeof(prism2_priv));
 	return 0;
 }
+#endif	/* WIRELESS_EXT <= 12 */
 #endif /* WIRELESS_EXT > 8 */
 #endif /* WIRELESS_EXT */
 
@@ -1241,15 +1324,15 @@ static int prism2_ioctl_priv_prism2_para
 }
 
 
-static int prism2_ioctl_priv_readmif(struct net_device *dev, struct iwreq *wrq)
+static int prism2_ioctl_priv_readmif(struct net_device *dev, int *i)
 {
 	u16 val, resp0;
 
-	val = *((int *) wrq->u.name);
+	val = *i;
 	if (hfa384x_cmd(dev, HFA384X_CMDCODE_READMIF, val, NULL, &resp0))
 		return -EOPNOTSUPP;
 	else
-		*(wrq->u.name) = resp0;
+		*i = resp0;
 
 	return 0;
 }
@@ -1528,6 +1611,86 @@ static int prism2_ioctl_priv_download(lo
 #endif /* PRISM2_DOWNLOAD_SUPPORT and WIRELESS_EXT > 8 */
 
 
+#if WIRELESS_EXT > 12
+
+/*
+ * Structures to export the Wireless Handlers
+ */
+
+static const iw_handler		prism2_handler[] =
+{
+	(iw_handler) NULL,				/* SIOCSIWCOMMIT */
+	(iw_handler) prism2_get_name,			/* SIOCGIWNAME */
+	(iw_handler) NULL,				/* SIOCSIWNWID */
+	(iw_handler) NULL,				/* SIOCGIWNWID */
+	(iw_handler) prism2_ioctl_siwfreq,		/* SIOCSIWFREQ */
+	(iw_handler) prism2_ioctl_giwfreq,		/* SIOCGIWFREQ */
+	(iw_handler) prism2_ioctl_siwmode,		/* SIOCSIWMODE */
+	(iw_handler) prism2_ioctl_giwmode,		/* SIOCGIWMODE */
+	(iw_handler) prism2_ioctl_siwsens,		/* SIOCSIWSENS */
+	(iw_handler) prism2_ioctl_giwsens,		/* SIOCGIWSENS */
+	(iw_handler) NULL,				/* SIOCSIWRANGE */
+	(iw_handler) prism2_ioctl_giwrange,		/* SIOCGIWRANGE */
+	(iw_handler) NULL,				/* SIOCSIWPRIV */
+	(iw_handler) NULL,				/* SIOCGIWPRIV */
+	(iw_handler) NULL,				/* SIOCSIWSTATS */
+	(iw_handler) NULL,				/* SIOCGIWSTATS */
+	(iw_handler) NULL,				/* SIOCSIWSPY */
+	(iw_handler) prism2_ioctl_giwspy,		/* SIOCGIWSPY */
+	(iw_handler) NULL,				/* -- hole -- */
+	(iw_handler) NULL,				/* -- hole -- */
+	(iw_handler) NULL,				/* SIOCSIWAP */
+	(iw_handler) prism2_ioctl_giwap,		/* SIOCGIWAP */
+	(iw_handler) NULL,				/* -- hole -- */
+	(iw_handler) prism2_ioctl_giwaplist,		/* SIOCGIWAPLIST */
+#if WIRELESS_EXT > 13
+	(iw_handler) NULL,				/* SIOCSIWSCAN */
+	(iw_handler) NULL,				/* SIOCGIWSCAN */
+#else	/* WIRELESS_EXT > 13 */
+	(iw_handler) NULL,				/* SIOCSIWSCAN */
+	(iw_handler) NULL,				/* SIOCGIWSCAN */
+#endif	/* WIRELESS_EXT > 13 */
+	(iw_handler) prism2_ioctl_siwessid,		/* SIOCSIWESSID */
+	(iw_handler) prism2_ioctl_giwessid,		/* SIOCGIWESSID */
+	(iw_handler) prism2_ioctl_siwnickn,		/* SIOCSIWNICKN */
+	(iw_handler) prism2_ioctl_giwnickn,		/* SIOCGIWNICKN */
+	(iw_handler) NULL,				/* -- hole -- */
+	(iw_handler) NULL,				/* -- hole -- */
+	(iw_handler) prism2_ioctl_siwrate,		/* SIOCSIWRATE */
+	(iw_handler) prism2_ioctl_giwrate,		/* SIOCGIWRATE */
+	(iw_handler) prism2_ioctl_siwrts,		/* SIOCSIWRTS */
+	(iw_handler) prism2_ioctl_giwrts,		/* SIOCGIWRTS */
+	(iw_handler) prism2_ioctl_siwfrag,		/* SIOCSIWFRAG */
+	(iw_handler) prism2_ioctl_giwfrag,		/* SIOCGIWFRAG */
+	(iw_handler) prism2_ioctl_siwtxpow,		/* SIOCSIWTXPOW */
+	(iw_handler) prism2_ioctl_giwtxpow,		/* SIOCGIWTXPOW */
+	(iw_handler) prism2_ioctl_siwretry,		/* SIOCSIWRETRY */
+	(iw_handler) prism2_ioctl_giwretry,		/* SIOCGIWRETRY */
+	(iw_handler) prism2_ioctl_siwencode,		/* SIOCSIWENCODE */
+	(iw_handler) prism2_ioctl_giwencode,		/* SIOCGIWENCODE */
+	(iw_handler) prism2_ioctl_siwpower,		/* SIOCSIWPOWER */
+	(iw_handler) prism2_ioctl_giwpower,		/* SIOCGIWPOWER */
+};
+
+/*
+ * Same for private handler. Empty because we don't conform the SET/GET
+ */
+static const iw_handler		prism2_private_handler[] =
+{
+};
+
+static const struct iw_handler_def	prism2_handler_def =
+{
+	num_standard:	sizeof(prism2_handler)/sizeof(iw_handler),
+	num_private:	sizeof(prism2_private_handler)/sizeof(iw_handler),
+	num_private_args: sizeof(prism2_priv)/sizeof(struct iw_priv_args),
+	standard:	(iw_handler *) prism2_handler,
+	private:	(iw_handler *) prism2_private_handler,
+	private_args:	(struct iw_priv_args *) prism2_priv,
+};
+
+#endif	/* WIRELESS_EXT > 12 */
+
 static int prism2_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd)
 {
 #ifdef WIRELESS_EXT
@@ -1536,131 +1699,239 @@ static int prism2_ioctl(struct net_devic
 	local_info_t *local = (local_info_t *) dev->priv;
 	int ret = 0;
 
+	/* Note : Wireless Extensions take care of checking permissions,
+	 * so we don't have to do it here. If you don't trust me,
+	 * check linux/net/core/dev.c - Jean II */
+
 	switch (cmd) {
 
 #ifdef WIRELESS_EXT
+#if WIRELESS_EXT <= 12
+		/* With v13 and later, this is done via the iw_handler table.
+		 * Private ioctls haven't been converted, because they
+		 * don't use the SET?GET convention. - Jean II */
 	case SIOCGIWNAME:
-		strcpy(wrq->u.name, "IEEE 802.11-DS");
+		/* gcc should be smart enough to inline that - Jean II */
+		prism2_get_name(dev, NULL, (char *) &(wrq->u), NULL);
 		break;
 
 	case SIOCSIWFREQ:
-		if (!capable(CAP_NET_ADMIN)) ret = -EPERM;
-		else ret = prism2_ioctl_siwfreq(dev, &wrq->u.freq);
+		ret = prism2_ioctl_siwfreq(dev, NULL, &wrq->u.freq, NULL);
 		break;
 	case SIOCGIWFREQ:
-		ret = prism2_ioctl_giwfreq(dev, &wrq->u.freq);
+		ret = prism2_ioctl_giwfreq(dev, NULL, &wrq->u.freq, NULL);
 		break;
 
 #if WIRELESS_EXT > 8
 	case SIOCSIWESSID:
-		if (!capable(CAP_NET_ADMIN)) ret = -EPERM;
-		else ret = prism2_ioctl_siwessid(dev, &wrq->u.data);
+		{
+			char ssid[IW_ESSID_MAX_SIZE+1];
+			if (wrq->u.essid.length > IW_ESSID_MAX_SIZE) {
+				ret = -E2BIG;
+				break;
+			}
+			if (copy_from_user(ssid, wrq->u.essid.pointer,
+					   wrq->u.essid.length)) {
+				ret = -EFAULT;
+				break;
+			}
+			ret = prism2_ioctl_siwessid(dev, NULL,
+						    &(wrq->u.essid),
+						    ssid);
+		}
 		break;
 	case SIOCGIWESSID:
-		ret = prism2_ioctl_giwessid(dev, &wrq->u.data);
+		{
+			char ssid[IW_ESSID_MAX_SIZE+1];
+			ret = prism2_ioctl_giwessid(dev, NULL,
+						    &(wrq->u.essid),
+						    ssid);
+			if (wrq->u.essid.pointer)
+				if ( copy_to_user(wrq->u.essid.pointer,
+						  ssid,
+						  wrq->u.essid.length) )
+					ret = -EFAULT;
+		}
 		break;
 
 	case SIOCSIWRATE:
-		if (!capable(CAP_NET_ADMIN)) ret = -EPERM;
-		else ret = prism2_ioctl_siwrate(dev, &wrq->u.bitrate);
+		ret = prism2_ioctl_siwrate(dev, NULL, &wrq->u.bitrate, NULL);
 		break;
 	case SIOCGIWRATE:
-		ret = prism2_ioctl_giwrate(dev, &wrq->u.bitrate);
+		ret = prism2_ioctl_giwrate(dev, NULL, &wrq->u.bitrate, NULL);
 		break;
 
 	case SIOCSIWRTS:
-		if (!capable(CAP_NET_ADMIN)) ret = -EPERM;
-		else ret = prism2_ioctl_siwrts(dev, &wrq->u.rts);
+		ret = prism2_ioctl_siwrts(dev, NULL, &wrq->u.rts, NULL);
 		break;
 	case SIOCGIWRTS:
-		ret = prism2_ioctl_giwrts(dev, &wrq->u.rts);
+		ret = prism2_ioctl_giwrts(dev, NULL, &wrq->u.rts, NULL);
 		break;
 
 	case SIOCSIWFRAG:
-		if (!capable(CAP_NET_ADMIN)) ret = -EPERM;
-		else ret = prism2_ioctl_siwfrag(dev, &wrq->u.rts);
+		ret = prism2_ioctl_siwfrag(dev, NULL, &wrq->u.rts, NULL);
 		break;
 	case SIOCGIWFRAG:
-		ret = prism2_ioctl_giwfrag(dev, &wrq->u.rts);
+		ret = prism2_ioctl_giwfrag(dev, NULL, &wrq->u.rts, NULL);
 		break;
 
 	case SIOCSIWENCODE:
-		if (!capable(CAP_NET_ADMIN)) ret = -EPERM;
-		else ret = prism2_ioctl_siwencode(dev, &wrq->u.encoding);
+		{
+			char keybuf[WEP_KEY_LEN + 1];
+			if (wrq->u.encoding.pointer) {
+				/* We actually have a key to set */
+				if (wrq->u.encoding.length > WEP_KEY_LEN + 1) {
+					ret = -E2BIG;
+					break;
+				}
+				if (copy_from_user(keybuf,
+						   wrq->u.encoding.pointer,
+						   wrq->u.encoding.length)) {
+					ret = -EFAULT;
+					break;
+				}
+			} else if (wrq->u.encoding.length != 0) {
+				ret = -EINVAL;
+				break;
+			}
+			ret = prism2_ioctl_siwencode(dev, NULL, &(wrq->u.encoding), keybuf);
+		}
 		break;
 	case SIOCGIWENCODE:
-		if (!capable(CAP_NET_ADMIN)) ret = -EPERM;
-		else ret = prism2_ioctl_giwencode(dev, &wrq->u.encoding);
+		{
+			char keybuf[WEP_KEY_LEN + 1];
+			ret = prism2_ioctl_giwencode(dev, NULL,
+						     &(wrq->u.encoding),
+						     keybuf);
+			if (wrq->u.encoding.pointer) {
+				if (copy_to_user(wrq->u.encoding.pointer,
+						 keybuf,
+						 wrq->u.encoding.length))
+					ret = -EFAULT;
+			}
+		}
 		break;
 #endif /* WIRELESS_EXT > 8 */
 
 	case SIOCGIWAP:
-		ret = prism2_ioctl_giwap(dev, &wrq->u.ap_addr);
+		ret = prism2_ioctl_giwap(dev, NULL, &wrq->u.ap_addr, NULL);
 		break;
 
 #if WIRELESS_EXT > 8
 	case SIOCSIWNICKN:
-		if (!capable(CAP_NET_ADMIN)) ret = -EPERM;
-		else ret = prism2_ioctl_siwnickn(dev, &wrq->u.data);
+		{
+			char nickbuf[IW_ESSID_MAX_SIZE+1];
+			if (wrq->u.essid.length > IW_ESSID_MAX_SIZE) {
+				ret = -E2BIG;
+				break;
+			}
+			if (copy_from_user(nickbuf, wrq->u.essid.pointer,
+					   wrq->u.essid.length)) {
+				ret = -EFAULT;
+				break;
+			}
+			ret = prism2_ioctl_siwnickn(dev, NULL, &(wrq->u.essid),
+						    nickbuf);
+		}
 		break;
 	case SIOCGIWNICKN:
-		ret = prism2_ioctl_giwnickn(dev, &wrq->u.data);
+		{
+			char nickbuf[IW_ESSID_MAX_SIZE+1];
+			ret = prism2_ioctl_giwnickn(dev, NULL, &(wrq->u.essid),
+						    nickbuf);
+			if (wrq->u.essid.pointer)
+				if ( copy_to_user(wrq->u.essid.pointer,
+						  nickbuf,
+						  wrq->u.essid.length) )
+					ret = -EFAULT;
+		}
 		break;
 
 	case SIOCGIWSPY:
-		ret = prism2_ioctl_giwspy(dev, &wrq->u.data);
+		{
+			char buffer[IW_MAX_SPY * (sizeof(struct sockaddr) +
+						  sizeof(struct iw_quality))];
+			ret = prism2_ioctl_giwspy(dev, NULL, &(wrq->u.data),
+						   buffer);
+			if (wrq->u.data.pointer) {
+				if (copy_to_user(wrq->u.data.pointer,
+						 buffer,
+						 (wrq->u.data.length *
+						  (sizeof(struct sockaddr) +
+						   sizeof(struct iw_quality)))
+						 ))
+					ret = -EFAULT;
+			}
+		}
 		break;
 
 	case SIOCGIWRANGE:
-		ret = prism2_ioctl_giwrange(dev, &wrq->u.data);
+		{
+			struct iw_range range;
+			ret = prism2_ioctl_giwrange(dev, NULL,
+						    &(wrq->u.data),
+						    (char *) &range);
+			if (copy_to_user(wrq->u.data.pointer, &range,
+					 sizeof(struct iw_range)))
+				ret = -EFAULT;
+		}
 		break;
 
 	case SIOCSIWSENS:
-		if (!capable(CAP_NET_ADMIN)) ret = -EPERM;
-		else ret = prism2_ioctl_siwsens(dev, &wrq->u.sens);
+		ret = prism2_ioctl_siwsens(dev, NULL, &wrq->u.sens, NULL);
 		break;
 	case SIOCGIWSENS:
-		ret = prism2_ioctl_giwsens(dev, &wrq->u.sens);
+		ret = prism2_ioctl_giwsens(dev, NULL, &wrq->u.sens, NULL);
 		break;
 
 	case SIOCGIWAPLIST:
-		ret = prism2_ioctl_giwaplist(dev, &wrq->u.data);
+		{
+			char buffer[IW_MAX_AP * (sizeof(struct sockaddr) +
+						  sizeof(struct iw_quality))];
+			ret = prism2_ioctl_giwaplist(dev, NULL, &(wrq->u.data),
+						     buffer);
+			if (wrq->u.data.pointer) {
+				if (copy_to_user(wrq->u.data.pointer,
+						 buffer,
+						 (wrq->u.data.length *
+						  (sizeof(struct sockaddr) +
+						   sizeof(struct iw_quality)))
+						 ))
+					ret = -EFAULT;
+			}
+		}
 		break;
 
 	case SIOCSIWMODE:
-		if (!capable(CAP_NET_ADMIN)) ret = -EPERM;
-		else ret = prism2_ioctl_siwmode(dev, wrq->u.mode);
+		ret = prism2_ioctl_siwmode(dev, NULL, &wrq->u.mode, NULL);
 		break;
 	case SIOCGIWMODE:
-		wrq->u.mode = local->iw_mode;
+		ret = prism2_ioctl_giwmode(dev, NULL, &wrq->u.mode, NULL);
 		break;
 
 	case SIOCSIWPOWER:
-		if (!capable(CAP_NET_ADMIN)) ret = -EPERM;
-		else ret = prism2_ioctl_siwpower(dev, &wrq->u.power);
+		ret = prism2_ioctl_siwpower(dev, NULL, &wrq->u.power, NULL);
 		break;
 	case SIOCGIWPOWER:
-		ret = prism2_ioctl_giwpower(dev, &wrq->u.power);
+		ret = prism2_ioctl_giwpower(dev, NULL, &wrq->u.power, NULL);
 		break;
 #endif /* WIRELESS_EXT > 8 */
 
 #if WIRELESS_EXT > 9
 	case SIOCSIWTXPOW:
-		if (!capable(CAP_NET_ADMIN)) ret = -EPERM;
-		else ret = prism2_ioctl_siwtxpow(dev, &wrq->u.txpower);
+		ret = prism2_ioctl_siwtxpow(dev, NULL, &wrq->u.txpower, NULL);
 		break;
 	case SIOCGIWTXPOW:
-		ret = prism2_ioctl_giwtxpow(dev, &wrq->u.txpower);
+		ret = prism2_ioctl_giwtxpow(dev, NULL, &wrq->u.txpower, NULL);
 		break;
 #endif /* WIRELESS_EXT > 9 */
 
 #if WIRELESS_EXT > 10
 	case SIOCSIWRETRY:
-		if (!capable(CAP_NET_ADMIN)) ret = -EPERM;
-		else ret = prism2_ioctl_siwretry(dev, &wrq->u.retry);
+		ret = prism2_ioctl_siwretry(dev, NULL, &wrq->u.retry, NULL);
 		break;
 	case SIOCGIWRETRY:
-		ret = prism2_ioctl_giwretry(dev, &wrq->u.retry);
+		ret = prism2_ioctl_giwretry(dev, NULL, &wrq->u.retry, NULL);
 		break;
 #endif /* WIRELESS_EXT > 10 */
 
@@ -1669,10 +1940,12 @@ static int prism2_ioctl(struct net_devic
 		ret = prism2_ioctl_giwpriv(dev, &wrq->u.data);
 		break;
 #endif /* WIRELESS_EXT > 8 */
+#endif	/* WIRELESS_EXT <= 12 */
 
 	case PRISM2_IOCTL_INQUIRE:
 		if (!capable(CAP_NET_ADMIN)) ret = -EPERM;
-		else ret = prism2_ioctl_priv_inquire(dev, (int *) wrq->u.name);
+		else ret = prism2_ioctl_priv_inquire(dev,
+						     (int *) wrq->u.name);
 		break;
 
 	case PRISM2_IOCTL_PRISM2_PARAM:
@@ -1683,13 +1956,15 @@ static int prism2_ioctl(struct net_devic
 
 	case PRISM2_IOCTL_READMIF:
 		if (!capable(CAP_NET_ADMIN)) ret = -EPERM;
-		else ret = prism2_ioctl_priv_readmif(dev, wrq);
+		else ret = prism2_ioctl_priv_readmif(dev,
+						     (int *) wrq->u.name);
 		break;
 
 #ifdef PRISM2_MONITOR
 	case PRISM2_IOCTL_MONITOR:
 		if (!capable(CAP_NET_ADMIN)) ret = -EPERM;
-		else ret = prism2_ioctl_priv_monitor(dev, (int *) wrq->u.name);
+		else ret = prism2_ioctl_priv_monitor(dev,
+						     (int *) wrq->u.name);
 		break;
 #endif /* PRISM2_MONITOR */
 
@@ -1753,17 +2028,17 @@ static int prism2_ioctl(struct net_devic
 #endif /* PRISM2_DOWNLOAD_SUPPORT and WIRELESS_EXT > 8 */
 
 	/* not supported wireless extensions */
-#ifdef SIOCSIWNAME
-	case SIOCSIWNAME:
-#endif
+//#ifdef SIOCSIWNAME
+//case SIOCSIWNAME: => Doesn't exist - Jean II
+//#endif
 	case SIOCSIWNWID:
 	case SIOCGIWNWID:
-	case SIOCSIWPRIV:
+//case SIOCSIWPRIV: => Doesn't exist - Jean II
 		ret = -EOPNOTSUPP;
 		break;
 
 	/* FIX: add support for (at least some of) these: */
-	case SIOCSIWRANGE:
+//case SIOCSIWRANGE: => Doesn't exist - Jean II
 	case SIOCSIWSPY:
 	case SIOCSIWAP:
 		printk(KERN_DEBUG "%s: %s unsupported WIRELESS_EXT "
